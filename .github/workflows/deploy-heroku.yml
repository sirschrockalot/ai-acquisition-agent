name: üöÄ Deploy Container to Heroku

on:
  workflow_run:
    workflows: ["CI/CD Pipeline - Test & Build"]
    types: [completed]
    branches: [ main ]
  workflow_dispatch:

env:
  HEROKU_APP_NAME: ai-acquisition-agent

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: üöÄ Checkout code
      uses: actions/checkout@v4
      
    - name: üîê Setup Heroku CLI
      run: |
        # Install Heroku CLI
        curl https://cli-assets.heroku.com/install.sh | sh
        
        # Add Heroku to PATH
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
        # Login to Heroku
        echo ${{ secrets.HEROKU_API_KEY }} | heroku auth:token
        
        # Ensure app is configured for Docker deployment
        heroku stack:set container --app ${{ env.HEROKU_APP_NAME }} || echo "App already set to container stack"
        
        # Remove any existing buildpacks to force Docker-only deployment
        heroku buildpacks:clear --app ${{ env.HEROKU_APP_NAME }} || echo "No buildpacks to clear"
        
        # Verify we're using container stack
        echo "üîç Current Heroku stack:"
        heroku stack --app ${{ env.HEROKU_APP_NAME }}
        
        # Ensure no buildpacks are configured
        echo "üîç Current buildpacks:"
        heroku buildpacks --app ${{ env.HEROKU_APP_NAME }} || echo "No buildpacks configured"
        
        # Verify app.json configuration
        echo "üîß Verifying container deployment configuration..."
        cat app.json
        
    - name: üê≥ Build and Push Docker Container
      run: |
        # Verify we have the necessary files
        echo "üîç Checking for required files..."
        ls -la
        echo "üì¶ Package files:"
        ls -la package*
        
        # Login to Heroku Container Registry
        echo ${{ secrets.HEROKU_API_KEY }} | docker login --username=${{ secrets.HEROKU_EMAIL }} --password-stdin registry.heroku.com
        
        # Build Docker image
        echo "üèóÔ∏è Building Docker image..."
        docker build -t registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web .
        
        # Verify Docker image was built successfully
        echo "üîç Docker image details:"
        docker images registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web
        
        # Push to Heroku Container Registry
        echo "üì§ Pushing to Heroku Container Registry..."
        docker push registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web
        
        # Release the container
        echo "üöÄ Releasing container..."
        heroku container:release web --app ${{ env.HEROKU_APP_NAME }}
        
        # Ensure the release was successful
        echo "üîç Container release status:"
        heroku releases --app ${{ env.HEROKU_APP_NAME }} | head -5
        
        # Verify container is running
        echo "üîç Verifying container deployment..."
        heroku ps --app ${{ env.HEROKU_APP_NAME }}
        
    - name: üîß Configure environment variables
      run: |
        heroku config:set NODE_ENV=production --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set PORT=3000 --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set TEST_MODE=false --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set SHOW_JSON_PAYLOAD=false --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set ASSIGNMENT_FEE_MIN=10000 --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set DEFAULT_DISPO_WINDOW=45 --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" --app ${{ env.HEROKU_APP_NAME }}
        
        # Set additional server configuration
        heroku config:set HOST=0.0.0.0 --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set LOG_LEVEL=info --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set OPENAI_MODEL=gpt-4o-mini --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set SLACK_BOT_TOKEN="${{ secrets.SLACK_BOT_TOKEN }}" --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set SLACK_SIGNING_SECRET="${{ secrets.SLACK_SIGNING_SECRET }}" --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set SLACK_APP_TOKEN="${{ secrets.SLACK_APP_TOKEN }}" --app ${{ env.HEROKU_APP_NAME }}
        
    - name: üóÑÔ∏è Setup MongoDB (MongoDB Atlas)
      run: |
        # Add MongoDB Atlas addon (requires credit card)
        heroku addons:create mongolab:sandbox --app ${{ env.HEROKU_APP_NAME }} || echo "MongoDB Atlas addon not available"
        
        # Get MongoDB connection string and set it
        MONGODB_URI=$(heroku config:get MONGODB_URI --app ${{ env.HEROKU_APP_NAME }})
        if [ -n "$MONGODB_URI" ]; then
          echo "‚úÖ MongoDB URI found: $MONGODB_URI"
        else
          echo "‚ö†Ô∏è MongoDB URI not found, setting default"
          MONGODB_URI="mongodb://localhost:27017/acquisitions_agent"
        fi
        
        # Set MongoDB URI in Heroku config
        heroku config:set MONGODB_URI="$MONGODB_URI" --app ${{ env.HEROKU_APP_NAME }}
        
        # Verify all environment variables are set
        echo "üîç Verifying environment variables..."
        heroku config --app ${{ env.HEROKU_APP_NAME }}
        
    - name: ‚úÖ Health check
      run: |
        # Wait for deployment
        sleep 60
        
        # Test application health
        curl -f https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/health || {
          echo "‚ùå Health check failed"
          exit 1
        }
        
        echo "‚úÖ Health check passed"
        
    - name: üìä Deployment summary
      run: |
        echo "üéâ Heroku container deployment completed successfully!"
        echo "üåê Your AI Agent is now live at: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com"
        echo "üì± Update your Slack app URL to: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/slack/events"
        echo "üê≥ Deployed using Docker containers for better reliability and consistency"
