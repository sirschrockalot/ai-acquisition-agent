name: üöÄ Deploy Container to Heroku

on:
  workflow_run:
    workflows: ["üîÑ CI/CD Pipeline - Test & Build"]
    types: [completed]
    branches: [ main ]
  workflow_dispatch:

env:
  HEROKU_APP_NAME: ai-acquisition-agent

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: üöÄ Checkout code
      uses: actions/checkout@v4
      
    - name: üîê Setup Heroku CLI
      run: |
        # Check if required secrets are available
        if [ -z "${{ secrets.HEROKU_API_KEY }}" ]; then
          echo "‚ùå HEROKU_API_KEY secret is missing!"
          echo "Please add HEROKU_API_KEY to your GitHub repository secrets"
          exit 1
        fi
        
        if [ -z "${{ secrets.HEROKU_EMAIL }}" ]; then
          echo "‚ùå HEROKU_EMAIL secret is missing!"
          echo "Please add HEROKU_EMAIL to your GitHub repository secrets"
          exit 1
        fi
        
        echo "‚úÖ Required secrets found"
        
        # Install Heroku CLI
        curl https://cli-assets.heroku.com/install.sh | sh
        
        # Add Heroku to PATH
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
        # Set Heroku API key as environment variable
        export HEROKU_API_KEY="${{ secrets.HEROKU_API_KEY }}"
        export HEROKU_EMAIL="${{ secrets.HEROKU_EMAIL }}"
        
        # Create .netrc file for non-interactive authentication
        echo "machine api.heroku.com" > ~/.netrc
        echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
        echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
        echo "machine git.heroku.com" >> ~/.netrc
        echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
        echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
        chmod 600 ~/.netrc
        
        # Set HEROKU_API_KEY environment variable for CLI
        echo "export HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }}" >> ~/.bashrc
        source ~/.bashrc
        
        # Verify authentication
        echo "üîê Testing Heroku authentication..."
        HEROKU_API_KEY="${{ secrets.HEROKU_API_KEY }}" heroku auth:whoami || {
          echo "‚ùå Direct authentication failed, trying with .netrc..."
          # Test if .netrc authentication works
          curl -H "Authorization: Bearer ${{ secrets.HEROKU_API_KEY }}" \
               -H "Accept: application/vnd.heroku+json; version=3" \
               https://api.heroku.com/account
        }
        
        # Ensure app is configured for Docker deployment
        heroku stack:set container --app ${{ env.HEROKU_APP_NAME }} || echo "App already set to container stack"
        
        # Remove any existing buildpacks to force Docker-only deployment
        heroku buildpacks:clear --app ${{ env.HEROKU_APP_NAME }} || echo "No buildpacks to clear"
        
        # Explicitly set no buildpacks
        heroku buildpacks:set --index 1 --app ${{ env.HEROKU_APP_NAME }} || echo "No buildpacks to set"
        
        # Verify we're using container stack
        echo "üîç Current Heroku stack:"
        heroku stack --app ${{ env.HEROKU_APP_NAME }}
        
        # Ensure no buildpacks are configured
        echo "üîç Current buildpacks:"
        heroku buildpacks --app ${{ env.HEROKU_APP_NAME }} || echo "No buildpacks configured"
        
        # Check if app exists and create it if needed
        echo "üîß Checking if app exists..."
        if ! heroku apps:info --app ${{ env.HEROKU_APP_NAME }} >/dev/null 2>&1; then
          echo "üì± Creating new Heroku app with container stack..."
          heroku create ${{ env.HEROKU_APP_NAME }} --stack container
        else
          echo "‚úÖ App already exists"
          # Ensure existing app is on container stack
          echo "üîß Setting app to container stack..."
          heroku stack:set container --app ${{ env.HEROKU_APP_NAME }}
        fi
        
        # Verify app.json configuration
        echo "üîß Verifying container deployment configuration..."
        cat app.json
        
        # Final authentication verification
        echo "üîê Verifying Heroku authentication..."
        if heroku auth:whoami; then
          echo "‚úÖ Heroku authentication successful"
        else
          echo "‚ùå Heroku authentication failed - cannot proceed"
          exit 1
        fi
        
    - name: üê≥ Build and Push Docker Container
      run: |
        # Verify we have the necessary files
        echo "üîç Checking for required files..."
        ls -la
        echo "üì¶ Package files:"
        ls -la package*
        
        # Try heroku container:push first, fallback to manual Docker if needed
        echo "üöÄ Attempting heroku container:push..."
        if heroku container:push web --force --app ${{ env.HEROKU_APP_NAME }}; then
          echo "‚úÖ heroku container:push succeeded"
        else
          echo "‚ö†Ô∏è heroku container:push failed, trying manual Docker deployment..."
          
          # Login to Heroku Container Registry
          echo ${{ secrets.HEROKU_API_KEY }} | docker login --username=${{ secrets.HEROKU_EMAIL }} --password-stdin registry.heroku.com
          
          # Build Docker image
          echo "üèóÔ∏è Building Docker image..."
          docker build -t registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web .
          
          # Push to Heroku Container Registry
          echo "üì§ Pushing to Heroku Container Registry..."
          docker push registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web
          
          # Release the container
          echo "üöÄ Releasing container..."
          heroku container:release web --app ${{ env.HEROKU_APP_NAME }}
        fi
        
        # Verify container is running
        echo "üîç Verifying container deployment..."
        heroku ps --app ${{ env.HEROKU_APP_NAME }}
        
    - name: üîß Configure environment variables
      run: |
        heroku config:set NODE_ENV=production --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set PORT=3000 --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set TEST_MODE=false --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set SHOW_JSON_PAYLOAD=false --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set ASSIGNMENT_FEE_MIN=10000 --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set DEFAULT_DISPO_WINDOW=45 --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" --app ${{ env.HEROKU_APP_NAME }}
        
        # Set additional server configuration
        heroku config:set HOST=0.0.0.0 --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set LOG_LEVEL=info --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set OPENAI_MODEL=gpt-4o-mini --app ${{ env.HEROKU_APP_NAME }}
        # Set Slack configuration with verification
        echo "üîê Setting Slack configuration..."
        heroku config:set SLACK_BOT_TOKEN="${{ secrets.SLACK_BOT_TOKEN }}" --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set SLACK_SIGNING_SECRET="${{ secrets.SLACK_SIGNING_SECRET }}" --app ${{ env.HEROKU_APP_NAME }}
        heroku config:set SLACK_APP_TOKEN="${{ secrets.SLACK_APP_TOKEN }}" --app ${{ env.HEROKU_APP_NAME }}
        
        # Verify Slack secrets are set
        echo "üîç Verifying Slack secrets..."
        SLACK_BOT_TOKEN=$(heroku config:get SLACK_BOT_TOKEN --app ${{ env.HEROKU_APP_NAME }})
        SLACK_SIGNING_SECRET=$(heroku config:get SLACK_SIGNING_SECRET --app ${{ env.HEROKU_APP_NAME }})
        SLACK_APP_TOKEN=$(heroku config:get SLACK_APP_TOKEN --app ${{ env.HEROKU_APP_NAME }})
        
        if [ -n "$SLACK_BOT_TOKEN" ] && [ "$SLACK_BOT_TOKEN" != "null" ]; then
          echo "‚úÖ SLACK_BOT_TOKEN set successfully"
        else
          echo "‚ùå SLACK_BOT_TOKEN not set or empty"
        fi
        
        if [ -n "$SLACK_SIGNING_SECRET" ] && [ "$SLACK_SIGNING_SECRET" != "null" ]; then
          echo "‚úÖ SLACK_SIGNING_SECRET set successfully"
        else
          echo "‚ùå SLACK_SIGNING_SECRET not set or empty"
        fi
        
        if [ -n "$SLACK_APP_TOKEN" ] && [ "$SLACK_APP_TOKEN" != "null" ]; then
          echo "‚úÖ SLACK_APP_TOKEN set successfully"
        else
          echo "‚ùå SLACK_APP_TOKEN not set or empty"
        fi
        
    - name: üóÑÔ∏è Setup MongoDB (Use Existing Atlas)
      run: |
        echo "üóÑÔ∏è Setting up MongoDB connection to your existing Atlas cluster..."
        
        # Set MongoDB URI from your existing Atlas cluster
        if [ -n "${{ secrets.MONGODB_URI }}" ]; then
          echo "‚úÖ Using your existing MongoDB Atlas URI"
          heroku config:set MONGODB_URI="${{ secrets.MONGODB_URI }}" --app ${{ env.HEROKU_APP_NAME }}
        else
          echo "‚ö†Ô∏è MONGODB_URI secret not found in GitHub"
          echo "Please add your MongoDB Atlas connection string to GitHub secrets:"
          echo "Name: MONGODB_URI"
          echo "Value: mongodb+srv://username:password@cluster.mongodb.net/database"
          exit 1
        fi
        
        # Verify MongoDB URI is set
        echo "üîç Verifying MongoDB configuration..."
        MONGODB_URI=$(heroku config:get MONGODB_URI --app ${{ env.HEROKU_APP_NAME }})
        if [ -n "$MONGODB_URI" ] && [ "$MONGODB_URI" != "null" ]; then
          echo "‚úÖ MongoDB URI set successfully: $MONGODB_URI"
        else
          echo "‚ùå MongoDB URI not set properly"
          exit 1
        fi
        
        # Verify all environment variables are set
        echo "üîç Verifying all environment variables..."
        heroku config --app ${{ env.HEROKU_APP_NAME }}
        
        # Restart the container to pick up new environment variables
        echo "üîÑ Restarting container to apply new environment variables..."
        heroku restart --app ${{ env.HEROKU_APP_NAME }}
        
        # Wait for restart
        echo "‚è≥ Waiting for container restart..."
        sleep 30
        
    - name: ‚úÖ Health check
      run: |
        # Wait for deployment and check app status
        echo "‚è≥ Waiting for app to start..."
        sleep 60
        
        # Check app status first
        echo "üîç Checking app status..."
        heroku ps --app ${{ env.HEROKU_APP_NAME }}
        
        # Check app logs for any errors
        echo "üìã Checking recent app logs..."
        heroku logs --tail --app ${{ env.HEROKU_APP_NAME }} | head -20
        
        # Test application health with better error handling
        echo "üè• Testing health endpoint..."
        echo "üîó Health URL: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/health"
        
        # Try multiple times with increasing delays
        for i in {1..3}; do
          echo "üîÑ Health check attempt $i..."
          if curl -f -v https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/health; then
            echo "‚úÖ Health check passed on attempt $i"
            break
          else
            echo "‚ö†Ô∏è Health check attempt $i failed"
            if [ $i -lt 3 ]; then
              echo "‚è≥ Waiting 30 seconds before retry..."
              sleep 30
            else
              echo "‚ùå All health check attempts failed"
              echo "üîç Final app status:"
              heroku ps --app ${{ env.HEROKU_APP_NAME }}
              echo "üìã Final app logs:"
              heroku logs --tail --app ${{ env.HEROKU_APP_NAME }} | head -30
              exit 1
            fi
          fi
        done
        
        echo "‚úÖ Health check completed successfully"
        
    - name: üìä Deployment summary
      run: |
        echo "üéâ Heroku container deployment completed successfully!"
        echo "üåê Your AI Agent is now live at: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com"
        echo "üì± Update your Slack app URL to: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/slack/events"
        echo "üê≥ Deployed using Docker containers for better reliability and consistency"
